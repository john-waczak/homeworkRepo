from __future__ import division
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation 

e_0 =1
q = -1
m = 1
Q = 1
w = 1
A = 10
u = 1


vx = 0.0
vy = 0.0
vz = 0.0

rx = 0.25
ry = 0.25
rz = 0.0

dt = 0.05 

# note that Ex and Ey are always zero#
def F_ez(t,x,y,z):
    return -q*(1/(e_0*A))*Q*np.cos(w*t)

def F_bx(t,x,y,z):
    return q*(u*np.sqrt(x**2+y**2)/(2*A))*(w*Q*np.sin(w*t))*(-y/np.sqrt(x**2+y**2))*vz

def F_by(t,x,y,z):
    return q*(u*np.sqrt(x**2+y**2)/(2*A))*(w*Q*np.sin(w*t))*(x/np.sqrt(x**2+y**2))*vz

def F_bz(t,x,y,z):
    return q*(-(u*np.sqrt(x**2+y**2)/(2*A))*(w*Q*np.sin(w*t))*(x/np.sqrt(x**2+y**2))*vx-(u*np.sqrt(x**2+y**2)/(2*A))*(w*Q*np.sin(w*t))*(-y/np.sqrt(x**2+y**2))*vy)


Tmax = 150

t = np.arange(0,Tmax, dt)


X = np.zeros((int(Tmax/dt)))
Y = np.zeros((int(Tmax/dt)))
Z = np.zeros((int(Tmax/dt))) 

X[0] = rx
Y[0] = ry
Z[0] = rz


#Using euler's method twice#
index = 0
for i in t:
    if (index >= int(Tmax/dt)-1):
        break
    else: 
        ax = F_bx(i, X[index], Y[index], Z[index])/m
        ay = F_by(i, X[index], Y[index], Z[index])/m
        az = (F_ez(i,X[index], Y[index], Z[index])+F_bz(i,X[index], Y[index], Z[index]))/m

        vx = vx + ax*dt
        vy = vy + ay*dt
        vz = vz + az*dt

        X[index+1] = X[index] + vx*dt + 0.5*ax*dt**2
        Y[index+1] = Y[index] + vy*dt + 0.5*ay*dt**2
        Z[index+1] = Z[index] + vz*dt + 0.5*az*dt**2

        index += 1 

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot(X,Y,Z, label='zi=0, xi=yi=0.25')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.legend() 
plt.savefig('trajectory.pdf')


